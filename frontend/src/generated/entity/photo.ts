/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: entity/photo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Photo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        albumId?: string;
        createdAt?: number;
        photoData?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("albumId" in data && data.albumId != undefined) {
                this.albumId = data.albumId;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("photoData" in data && data.photoData != undefined) {
                this.photoData = data.photoData;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get albumId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set albumId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set createdAt(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get photoData() {
        return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array()) as Uint8Array;
    }
    set photoData(value: Uint8Array) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: string;
        albumId?: string;
        createdAt?: number;
        photoData?: Uint8Array;
    }): Photo {
        const message = new Photo({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.albumId != null) {
            message.albumId = data.albumId;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.photoData != null) {
            message.photoData = data.photoData;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            albumId?: string;
            createdAt?: number;
            photoData?: Uint8Array;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.albumId != null) {
            data.albumId = this.albumId;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.photoData != null) {
            data.photoData = this.photoData;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.albumId.length)
            writer.writeString(2, this.albumId);
        if (this.createdAt != 0)
            writer.writeInt64(3, this.createdAt);
        if (this.photoData.length)
            writer.writeBytes(4, this.photoData);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Photo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Photo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.albumId = reader.readString();
                    break;
                case 3:
                    message.createdAt = reader.readInt64();
                    break;
                case 4:
                    message.photoData = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Photo {
        return Photo.deserialize(bytes);
    }
}
