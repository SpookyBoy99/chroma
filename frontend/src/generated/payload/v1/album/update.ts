/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: payload/v1/album/update.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class UpdateAlbumRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3]];
    constructor(data?: any[] | ({
        id?: string;
    } & (({
        name?: string;
    }) | ({
        coverPhotoId?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("coverPhotoId" in data && data.coverPhotoId != undefined) {
                this.coverPhotoId = data.coverPhotoId;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get hasName() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get coverPhotoId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set coverPhotoId(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get hasCoverPhotoId() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _name() {
        const cases: {
            [index: number]: "none" | "name";
        } = {
            0: "none",
            2: "name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _coverPhotoId() {
        const cases: {
            [index: number]: "none" | "coverPhotoId";
        } = {
            0: "none",
            3: "coverPhotoId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        coverPhotoId?: string;
    }): UpdateAlbumRequest {
        const message = new UpdateAlbumRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.coverPhotoId != null) {
            message.coverPhotoId = data.coverPhotoId;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            coverPhotoId?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.coverPhotoId != null) {
            data.coverPhotoId = this.coverPhotoId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.hasName)
            writer.writeString(2, this.name);
        if (this.hasCoverPhotoId)
            writer.writeString(3, this.coverPhotoId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAlbumRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAlbumRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.coverPhotoId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateAlbumRequest {
        return UpdateAlbumRequest.deserialize(bytes);
    }
}
