name: release
on:
  push: 
    tags:
    - '**'

jobs:
  server-fmt:
    name: server-fmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        components: rustfmt
    - run: cargo fmt --all --check
      working-directory: server

  build-server-musl:
    name: build-server-musl
    needs: server-fmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: sudo apt install gcc musl-tools cmake clang protobuf-compiler
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        target: x86_64-unknown-linux-musl
    - name: Set up cargo cache
      uses: actions/cache@v3
      continue-on-error: false
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-
    - run: cargo build --release --target x86_64-unknown-linux-musl
      working-directory: server
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: server-x86_64-unknown-linux-musl
        path: ./server/target/x86_64-unknown-linux-musl/release/chroma

  build-server-gnu:
    name: build-server-gnu
    needs: server-fmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: sudo apt install gcc cmake clang protobuf-compiler
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        target: x86_64-unknown-linux-gnu
    - name: Set up cargo cache
      uses: actions/cache@v3
      continue-on-error: false
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-
    - run: cargo build --release --target x86_64-unknown-linux-gnu
      working-directory: server
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: server-x86_64-unknown-linux-gnu
        path: ./server/target/x86_64-unknown-linux-gnu/release/chroma


  build-docs:
    name: build-docs
    needs: server-fmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: sudo apt install gcc cmake clang gzip tar
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Set up cargo cache
      uses: actions/cache@v3
      continue-on-error: false
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-
    - uses: actions-rs/cargo@v1
      with:
        command: install
        args: mdbook --force
    - run: mdbook build
      working-directory: docs
    - run: tar -czf docs.tar.gz book/*
      working-directory: docs 
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: docs.tar.gz
        path: ./docs/docs.tar.gz


  build-frontend:
    name: build-frontend
    needs: server-fmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set Node.js 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
    - name: Run install
      uses: borales/actions-yarn@v4
      with:
        dir: frontend
        cmd: install
    - name: Build
      uses: borales/actions-yarn@v4
      with:
        dir: frontend
        cmd: build
    - run: tar -czf frontend.tar.gz dist/*
      working-directory: frontend
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend.tar.gz
        path: ./frontend/frontend.tar.gz


  create-release:
    name: create-release
    needs:
    - build-server-musl
    - build-server-gnu
    - build-docs
    - build-frontend
    runs-on: ubuntu-latest
    steps:
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
    
    - run: mv server-x86_64-unknown-linux-musl/chroma server-x86_64-unknown-linux-musl/server-x86_64-unknown-linux-musl
    - run: mv server-x86_64-unknown-linux-gnu/chroma server-x86_64-unknown-linux-gnu/server-x86_64-unknown-linux-gnu

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          server-x86_64-unknown-linux-musl/server-x86_64-unknown-linux-musl
          server-x86_64-unknown-linux-gnu/server-x86_64-unknown-linux-gnu
          docs.tar.gz/docs.tar.gz
          frontend.tar.gz/frontend.tar.gz